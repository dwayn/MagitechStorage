buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

archivesBaseName = "${mod_name}-forge-${minecraft_version}"

minecraft {
    mappings channel: 'official', version: minecraft_version
    
    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly project(":Common")
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
    var replaceProperties = [
            minecraft_version: minecraft_version,
//            minecraft_version_range: minecraft_version_range,
            forge_version: forge_version,
//            forge_version_range: forge_version_range,
//            loader_version_range: loader_version_range,
            mod_author: mod_author,
            mod_id: mod_id,
            mod_name: mod_name + " [Forge]",
            version: minecraft_version + "-" + version + "-forge",
            mod_license: license,
//            mod_version: mod_version,
//            mod_authors: mod_authors,
            mod_source: mod_source,
            mod_issues: mod_issues,
            mod_description: mod_description,
            mod_homepage: mod_homepage,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

//// This block of code expands all declared replace properties in the specified resource targets.
//// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
//// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
//// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
//tasks.named('processResources', ProcessResources).configure {
//    var replaceProperties = [
//            minecraft_version: minecraft_version,
////            minecraft_version_range: minecraft_version_range,
//            forge_version: forge_version,
////            forge_version_range: forge_version_range,
////            loader_version_range: loader_version_range,
//            mod_auhor: mod_author,
//            mod_id: mod_id,
//            mod_name: mod_name,
//            version: version,
//            mod_license: license,
////            mod_version: mod_version,
////            mod_authors: mod_authors,
////            mod_description: mod_description,
//    ]
//    inputs.properties replaceProperties
//
//    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
//        expand replaceProperties + [project: project]
//    }
//}
